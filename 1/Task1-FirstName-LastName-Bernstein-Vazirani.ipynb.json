{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "# Qiskit Notebook for Bernstein-Vazirani\n",
    "Author: ......"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from qiskit import *\n",
    "from qiskit_aer import AerSimulator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from qiskit.visualization import plot_histogram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "secretnumber = '1100101'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "ericcircuit = QuantumCircuit(7+1, 7)\n",
    "\n",
    "ericcircuit.h([0,1,2,3,4,5,6])\n",
    "ericcircuit.?([?])\n",
    "ericcircuit.?([?])\n",
    "ericcircuit.barrier()\n",
    "\n",
    "ericcircuit.?(?,?)\n",
    "ericcircuit.?(?,?)\n",
    "ericcircuit.?(?,?)\n",
    "ericcircuit.?(?,?)\n",
    "## Corresponds to 1100111 (qubit 6, qubit 5, qubit 2, qubit 0)\n",
    "ericcircuit.barrier()\n",
    "\n",
    "ericcircuit.h([?])\n",
    "ericcircuit.barrier()\n",
    "\n",
    "ericcircuit.measure([0,1,2,3,4,5,6], [0,1,2,3,4,5,6])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "circuit_picture = ericcircuit.draw(output = 'mpl', style ='iqp')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from qiskit.visualization import plot_histogram\n",
    "result = AerSimulator().run(?).result()\n",
    "statistics = ?.get_counts()\n",
    "plot_histogram = plot_histogram(?)\n",
    "plt.show()\n",
    "print(?)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
